#!/usr/bin/env python3
"""
Script ch·ªânh s·ª≠a file info.json sau khi vi·ªát h√≥a
"""
import json
import os
from pathlib import Path
from datetime import datetime
import zipfile
import tempfile
import shutil

class InfoJsonUpdater:
    def __init__(self):
        self.current_date = datetime.now().strftime('%Y-%m-%d')
    
    def read_current_info_json(self, file_path):
        """ƒê·ªçc file info.json hi·ªán t·∫°i"""
        try:
            with open(file_path, 'r', encoding='utf-8') as f:
                return json.load(f)
        except Exception as e:
            print(f"‚ùå Error reading {file_path}: {e}")
            return None
    
    def clean_dependencies(self, dependencies):
        """Lo·∫°i b·ªè c√°c dependencies duplicate"""
        if not dependencies:
            return []
        
        # Lo·∫°i b·ªè duplicates nh∆∞ng gi·ªØ nguy√™n th·ª© t·ª±
        seen = set()
        cleaned = []
        for dep in dependencies:
            if dep not in seen:
                seen.add(dep)
                cleaned.append(dep)
        
        return sorted(cleaned)  # S·∫Øp x·∫øp theo th·ª© t·ª± alphabet
    
    def update_info_json_content(self, info_data, translated_mods=None):
        """C·∫≠p nh·∫≠t n·ªôi dung info.json"""
        # C·∫≠p nh·∫≠t version
        current_version = info_data.get('version', '1.0.0')
        version_parts = current_version.split('.')
        if len(version_parts) >= 3:
            # TƒÉng patch version
            patch = int(version_parts[2]) + 1
            new_version = f"{version_parts[0]}.{version_parts[1]}.{patch}"
        else:
            new_version = "1.0.1"
        
        # C·∫≠p nh·∫≠t th√¥ng tin c∆° b·∫£n
        updated_info = {
            "name": info_data.get("name", "Auto_Translate_Mod_Langue_Vietnamese"),
            "version": new_version,
            "title": "Factorio Mods Vietnamese Language Pack (SafeTranslate)",
            "author": info_data.get("author", "Hoang0109"),
            "factorio_version": info_data.get("factorio_version", "2.0"),
            "description": f"G√≥i vi·ªát h√≥a cho c√°c mod Factorio ƒë∆∞·ª£c d·ªãch b·∫±ng SafeGoogleTranslateAPI - An to√†n, ch·∫•t l∆∞·ª£ng cao (Updated: {self.current_date})",
        }
        
        # X·ª≠ l√Ω dependencies
        dependencies = info_data.get("dependencies", [])
        
        # N·∫øu c√≥ danh s√°ch mods ƒë√£ d·ªãch, c·∫≠p nh·∫≠t dependencies
        if translated_mods:
            # Th√™m c√°c mods m·ªõi ƒë√£ d·ªãch
            for mod_name in translated_mods:
                dep_entry = f"? {mod_name}"
                if dep_entry not in dependencies:
                    dependencies.append(dep_entry)
        
        # Clean up dependencies
        cleaned_deps = self.clean_dependencies(dependencies)
        updated_info["dependencies"] = cleaned_deps
        
        return updated_info
    
    def update_info_json_file(self, file_path, translated_mods=None):
        """C·∫≠p nh·∫≠t file info.json"""
        print(f"üîß Updating {file_path}")
        
        # ƒê·ªçc file hi·ªán t·∫°i
        info_data = self.read_current_info_json(file_path)
        if not info_data:
            return False
        
        print(f"  üìã Current version: {info_data.get('version', 'unknown')}")
        print(f"  üì¶ Dependencies count: {len(info_data.get('dependencies', []))}")
        
        # C·∫≠p nh·∫≠t n·ªôi dung
        updated_info = self.update_info_json_content(info_data, translated_mods)
        
        print(f"  ‚úÖ New version: {updated_info['version']}")
        print(f"  üßπ Cleaned dependencies: {len(updated_info['dependencies'])}")
        
        # Backup file g·ªëc
        backup_path = f"{file_path}.backup"
        shutil.copy2(file_path, backup_path)
        print(f"  üíæ Backup created: {backup_path}")
        
        # Ghi file m·ªõi
        try:
            with open(file_path, 'w', encoding='utf-8') as f:
                json.dump(updated_info, f, ensure_ascii=False, indent=2)
            
            print(f"  ‚úÖ Updated successfully!")
            return True
            
        except Exception as e:
            print(f"  ‚ùå Error writing file: {e}")
            # Restore backup n·∫øu c√≥ l·ªói
            shutil.copy2(backup_path, file_path)
            return False
    
    def update_zip_info_json(self, zip_path, translated_mods=None):
        """C·∫≠p nh·∫≠t info.json trong file zip"""
        print(f"üóúÔ∏è Updating info.json in {os.path.basename(zip_path)}")
        
        try:
            # T·∫°o th∆∞ m·ª•c t·∫°m
            with tempfile.TemporaryDirectory() as temp_dir:
                # Gi·∫£i n√©n zip
                with zipfile.ZipFile(zip_path, 'r') as zipf:
                    zipf.extractall(temp_dir)
                
                # T√¨m file info.json
                info_json_paths = []
                for root, dirs, files in os.walk(temp_dir):
                    for file in files:
                        if file == 'info.json':
                            info_json_paths.append(os.path.join(root, file))
                
                if not info_json_paths:
                    print("  ‚ùå No info.json found in zip")
                    return False
                
                # C·∫≠p nh·∫≠t t·ª´ng info.json
                success = True
                for info_path in info_json_paths:
                    if not self.update_info_json_file(info_path, translated_mods):
                        success = False
                
                if not success:
                    return False
                
                # T·∫°o l·∫°i zip file
                backup_zip = f"{zip_path}.backup"
                shutil.copy2(zip_path, backup_zip)
                print(f"  üíæ Zip backup: {backup_zip}")
                
                # T·∫°o zip m·ªõi
                with zipfile.ZipFile(zip_path, 'w', zipfile.ZIP_DEFLATED) as zipf:
                    for root, dirs, files in os.walk(temp_dir):
                        for file in files:
                            file_path = os.path.join(root, file)
                            arcname = os.path.relpath(file_path, temp_dir)
                            zipf.write(file_path, arcname)
                
                print(f"  ‚úÖ Zip updated successfully!")
                return True
                
        except Exception as e:
            print(f"  ‚ùå Error updating zip: {e}")
            return False
    
    def scan_and_update_output_directory(self, output_dir="output"):
        """Qu√©t v√† c·∫≠p nh·∫≠t t·∫•t c·∫£ file info.json trong th∆∞ m·ª•c output"""
        output_path = Path(output_dir)
        
        if not output_path.exists():
            print(f"‚ùå Directory {output_dir} kh√¥ng t·ªìn t·∫°i!")
            return
        
        print(f"üîç SCANNING OUTPUT DIRECTORY: {output_dir}")
        print("=" * 60)
        
        # T√¨m t·∫•t c·∫£ file zip
        zip_files = list(output_path.glob("*.zip"))
        
        if not zip_files:
            print("‚ùå No zip files found!")
            return
        
        print(f"üì¶ Found {len(zip_files)} zip files")
        
        # C·∫≠p nh·∫≠t t·ª´ng file
        success_count = 0
        for zip_file in zip_files:
            print(f"\nüì¶ Processing: {zip_file.name}")
            if self.update_zip_info_json(zip_file):
                success_count += 1
        
        print(f"\nüìä SUMMARY:")
        print(f"‚úÖ Successfully updated: {success_count}/{len(zip_files)} files")
        print(f"‚ùå Failed: {len(zip_files) - success_count} files")
    
    def create_updated_info_template(self, output_file="updated_info_template.json"):
        """T·∫°o template info.json m·ªõi v·ªõi c√°c c·∫£i ti·∫øn"""
        template = {
            "name": "Auto_Translate_Mod_Langue_Vietnamese",
            "version": "2.0.0",
            "title": "Factorio Mods Vietnamese Language Pack (SafeTranslate)",
            "author": "Hoang0109",
            "factorio_version": "2.0",
            "description": f"G√≥i vi·ªát h√≥a ch·∫•t l∆∞·ª£ng cao cho c√°c mod Factorio. S·ª≠ d·ª•ng SafeGoogleTranslateAPI v·ªõi 99.2% ƒë·ªô ch√≠nh x√°c ti·∫øng Vi·ªát. H·ªó tr·ª£ 40+ mods ph·ªï bi·∫øn (Updated: {self.current_date})",
            "dependencies": [
                "? aai-industry",
                "? aai-loaders", 
                "? alien-biomes",
                "? Babelfish",
                "? BigBags",
                "? jetpack",
                "? RateCalculator"
            ]
        }
        
        with open(output_file, 'w', encoding='utf-8') as f:
            json.dump(template, f, ensure_ascii=False, indent=2)
        
        print(f"üìÑ Template created: {output_file}")
        return template

def main():
    updater = InfoJsonUpdater()
    
    print("üéØ INFO.JSON UPDATER")
    print("=" * 40)
    
    # T√πy ch·ªçn 1: C·∫≠p nh·∫≠t t·∫•t c·∫£ file trong output directory
    print("\n1. Updating all files in output directory:")
    updater.scan_and_update_output_directory()
    
    # T√πy ch·ªçn 2: T·∫°o template m·ªõi
    print("\n2. Creating updated template:")
    updater.create_updated_info_template()
    
    print("\nüéâ Info.json update completed!")

def update_specific_file(file_path, translated_mods=None):
    """Function ƒë·ªÉ c·∫≠p nh·∫≠t file c·ª• th·ªÉ t·ª´ b√™n ngo√†i"""
    updater = InfoJsonUpdater()
    
    if file_path.endswith('.zip'):
        return updater.update_zip_info_json(file_path, translated_mods)
    else:
        return updater.update_info_json_file(file_path, translated_mods)

if __name__ == "__main__":
    main()

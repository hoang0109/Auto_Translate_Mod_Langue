#!/usr/bin/env python3
"""
T·∫°o b·∫£n d·ªãch s·∫°ch ch·ªâ t·ª´ file locale/en
"""
import os
import zipfile
import json
from pathlib import Path
from improved_mod_finder import find_locale_files_improved
from mod_translate_core import read_cfg_file, parse_cfg_lines
from google_translate_core import GoogleTranslateAPI

def analyze_and_clean_translate(selected_files, target_lang='VI'):
    """
    T·∫°o b·∫£n d·ªãch s·∫°ch v·ªõi filtering t·ªët h∆°n
    """
    print("üßπ CLEAN TRANSLATION PROCESS")
    print("=" * 50)
    
    google_translator = GoogleTranslateAPI()
    translated_mods = []
    skipped_mods = []
    
    # T·∫°o th∆∞ m·ª•c output s·∫°ch
    clean_output_dir = Path("clean_output")
    clean_output_dir.mkdir(exist_ok=True)
    
    for mod_path in selected_files:
        print(f"\nüì¶ Processing: {os.path.basename(mod_path)}")
        
        try:
            with zipfile.ZipFile(mod_path, 'r') as zipf:
                # ƒê·ªçc info.json
                info_json_path = next((f for f in zipf.namelist() if f.endswith('info.json')), None)
                if not info_json_path:
                    print("  ‚ùå No info.json found")
                    continue
                
                with zipf.open(info_json_path) as f:
                    info = json.load(f)
                    mod_name = info.get("name", "unknown_mod")
                
                print(f"  üè∑Ô∏è  Mod name: {mod_name}")
                
                # T√¨m file locale/en v·ªõi filter nghi√™m ng·∫∑t
                root_folder, locale_files = find_locale_files_improved(mod_path)
                
                if not locale_files:
                    print(f"  ‚ö™ No English locale files found")
                    skipped_mods.append(mod_name)
                    continue
                
                print(f"  üìÑ Found {len(locale_files)} English locale files:")
                for lf in locale_files:
                    print(f"    - {lf}")
                
                # Ki·ªÉm tra t·ª´ng file c√≥ th·ª±c s·ª± l√† ti·∫øng Anh kh√¥ng
                verified_english_files = []
                all_values = []
                file_entries = []
                
                for locale_file in locale_files:
                    print(f"  üîç Analyzing: {os.path.basename(locale_file)}")
                    
                    raw_text = read_cfg_file(zipf, locale_file)
                    key_vals, lines = parse_cfg_lines(raw_text)
                    
                    # Ki·ªÉm tra n·ªôi dung c√≥ ph·∫£i ti·∫øng Anh kh√¥ng
                    english_content = verify_english_content(key_vals)
                    
                    if english_content['is_english']:
                        print(f"    ‚úÖ Verified as English ({english_content['english_ratio']:.1%} English content)")
                        verified_english_files.append(locale_file)
                        file_entries.append((locale_file, key_vals, lines))
                        all_values.extend([item['val'] for item in key_vals])
                    else:
                        print(f"    ‚ùå Not English ({english_content['english_ratio']:.1%} English, detected: {english_content['detected_languages']})")
                
                if not all_values:
                    print(f"  ‚ö™ No verified English content to translate")
                    skipped_mods.append(mod_name)
                    continue
                
                print(f"  üåê Translating {len(all_values)} text entries...")
                
                # D·ªãch v·ªõi Google Translate
                translated_values = google_translator.translate_texts(
                    all_values,
                    target_lang,
                    'en',
                    progress_callback=lambda current, total, msg: print(f"    {msg}")
                )
                
                # T·∫°o file .cfg d·ªãch
                merged_lines = []
                tv_iter = iter(translated_values)
                
                for locale_file, key_vals, lines in file_entries:
                    translated_lines = lines[:]
                    for item in key_vals:
                        try:
                            translated_val = next(tv_iter)
                            translated_lines[item['index']] = f"{item['key']}={translated_val}\n"
                        except StopIteration:
                            break
                    merged_lines.extend(translated_lines)
                
                # L∆∞u file k·∫øt qu·∫£
                output_file = clean_output_dir / f"{mod_name}_clean.cfg"
                with open(output_file, "w", encoding="utf-8") as f:
                    f.writelines(merged_lines)
                
                print(f"  ‚úÖ Saved clean translation: {output_file.name}")
                translated_mods.append(mod_name)
                
        except Exception as e:
            print(f"  ‚ùå Error processing {mod_path}: {e}")
            continue
    
    # B√°o c√°o k·∫øt qu·∫£
    print(f"\nüìä CLEAN TRANSLATION SUMMARY")
    print("=" * 30)
    print(f"‚úÖ Successfully translated: {len(translated_mods)} mods")
    print(f"‚ö™ Skipped (no English content): {len(skipped_mods)} mods")
    
    if translated_mods:
        print(f"\nüìã Translated mods:")
        for mod in translated_mods:
            print(f"  ‚Ä¢ {mod}")
    
    if skipped_mods:
        print(f"\nüìã Skipped mods:")
        for mod in skipped_mods:
            print(f"  ‚Ä¢ {mod}")

def verify_english_content(key_vals):
    """
    Ki·ªÉm tra n·ªôi dung c√≥ th·ª±c s·ª± l√† ti·∫øng Anh kh√¥ng
    S·ª≠ d·ª•ng thu·∫≠t to√°n ƒë∆°n gi·∫£n h∆°n: ki·ªÉm tra c√°c t·ª´ th√¥ng d·ª•ng ti·∫øng Anh
    """
    
    total_entries = len(key_vals)
    if total_entries == 0:
        return {'is_english': False, 'english_ratio': 0, 'reason': 'No entries'}
    
    # C√°c t·ª´ ti·∫øng Anh th√¥ng d·ª•ng trong Factorio
    english_indicators = [
        # C√°c t·ª´ th√¥ng d·ª•ng
        'the', 'and', 'for', 'with', 'from', 'this', 'that', 'can', 'will', 'are', 'is',
        # C√°c t·ª´ Factorio
        'iron', 'copper', 'steel', 'plate', 'gear', 'wire', 'engine', 'motor', 'belt',
        'inserter', 'assembling', 'machine', 'furnace', 'drill', 'mining', 'electric',
        'steam', 'boiler', 'generator', 'solar', 'panel', 'accumulator', 'lab',
        'science', 'pack', 'research', 'technology', 'recipe', 'item', 'entity'
    ]
    
    # C√°c ch·ªâ s·ªë ng√¥n ng·ªØ kh√°c (k√Ω t·ª± ƒë·∫∑c bi·ªát)
    non_english_indicators = [
        # Ti·∫øng Czech
        'ƒç', '≈ô', 'ƒõ', '≈°', '≈æ', '√Ω', '√°', '√≠', '√©', '√∫', '≈Ø',
        # Ti·∫øng ƒê·ª©c
        '√§', '√∂', '√º', '√ü',
        # Ti·∫øng Ph√°p  
        '√†', '√¢', '√ß', '√®', '√©', '√™', '√´', '√Æ', '√Ø', '√¥', '√π', '√ª', '√º',
        # Ti·∫øng T√¢y Ban Nha
        '√±', '√°', '√©', '√≠', '√≥', '√∫', '√º'
    ]
    
    english_score = 0
    non_english_score = 0
    
    for item in key_vals:
        value = item['val'].strip().lower()
        if len(value) < 2:
            continue
            
        # Ki·ªÉm tra c√°c t·ª´ ti·∫øng Anh
        for indicator in english_indicators:
            if indicator in value:
                english_score += 1
                break  # Ch·ªâ t√≠nh 1 l·∫ßn cho m·ªói entry
        
        # Ki·ªÉm tra c√°c k√Ω t·ª± kh√¥ng ph·∫£i ti·∫øng Anh
        for char in non_english_indicators:
            if char in value:
                non_english_score += 2  # Tr·ª´ng ph·∫°t n·∫∑ng h∆°n
                break
    
    # T√≠nh ratio ti·∫øng Anh
    english_ratio = english_score / max(total_entries, 1)
    non_english_ratio = non_english_score / max(total_entries, 1)
    
    # Quy·∫øt ƒë·ªãnh: √≠t nh·∫•t 30% c√°c entry c√≥ t·ª´ ti·∫øng Anh v√† kh√¥ng qu√° 20% c√°c entry c√≥ k√Ω t·ª± kh√¥ng ph·∫£i ti·∫øng Anh
    is_english = english_ratio >= 0.3 and non_english_ratio <= 0.2
    
    return {
        'is_english': is_english,
        'english_ratio': english_ratio,
        'non_english_ratio': non_english_ratio,
        'english_score': english_score,
        'non_english_score': non_english_score,
        'total_entries': total_entries,
        'reason': f'English: {english_score}/{total_entries} ({english_ratio:.1%}), Non-English: {non_english_score}/{total_entries} ({non_english_ratio:.1%})'
    }

def test_clean_translation():
    """Test v·ªõi m·ªôt v√†i mod"""
    mods_dir = r"C:\Users\Acer\AppData\Roaming\Factorio\mods"
    
    # Test v·ªõi m·ªôt v√†i mod c√≥ ti·∫øng Anh
    test_mods = [
        "aai-industry_0.6.10.zip",
        "alien-biomes_0.7.4.zip",
        "jetpack_0.4.12.zip"
    ]
    
    selected_files = []
    for mod_name in test_mods:
        mod_path = os.path.join(mods_dir, mod_name)
        if os.path.exists(mod_path):
            selected_files.append(mod_path)
    
    if selected_files:
        analyze_and_clean_translate(selected_files, 'VI')
    else:
        print("‚ùå No test mods found!")

if __name__ == "__main__":
    test_clean_translation()
